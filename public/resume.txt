👨‍💻 이름 : 성찬홍

🏫 대학교 : 동아대학교

☎️ 연락처 : 010-5897-3405

✉️ 이메일 : bkn367@naver.com

Github: https://github.com/DChanHong

Blog : https://velog.io/@hongchee

# 📄 이력서 (경력 기술서)

**이름**: 성찬홍

**포지션**: 프론트엔드 개발자

**재직 기간**: 2023.09 ~ 현재

재직 회사 : 로펌 개발자

---

## 💼 경력 요약

- **프론트엔드 전담 개발자**로 실시간 채팅 서비스, 뉴스 플랫폼, 모바일 서비스 등 다양한 프로젝트에 참여
- Next.js + TypeScript 기반 개발 경험 다수
- **WebSocket 실시간 통신, DB 설계, 인증·보안 처리, 외부 서비스 연동(Firebase/카카오/토스)** 경험 보유
- **풀스택(Next.js 서버리스 API + Prisma + PostgreSQL) → 프론트엔드 전문화**까지 성장 과정 경험
- 다수의 자사 홈페이지(80여 개)에 공통 UI 컴포넌트를 배포·관리한 경험으로 **확장성과 유지보수성**에 강점

---

## 🚀 주요 프로젝트 경험

### 1. 실시간 채팅 서비스 (사내 채널톡 대체 서비스)

**기간**: 2025.04 ~ 현재

**역할**: 프론트엔드 개발 전담

### 프로젝트 개요

기존 채널톡 유료 서비스를 대체하고, 사내 요구사항에 맞춘 맞춤형 실시간 채팅 서비스를 구축.

**80여 개 자사 홈페이지 전체에서 재사용 가능한 구조**를 목표로 개발.

### 주요 기여

- 관리자 사이트 채팅창 개발: actions/fetchers 분리 구조 도입, 관리자 전용 UI/기능 구현
- 사용자 사이트 채팅창 개발:
    - **npm 패키지 모듈화** → 80여 개 홈페이지에 배포 및 유지보수 자동화
    - 신규 의존성 최소화 및 기존 패키지 재활용으로 관리 비용 절감
    - Context API 기반 상태 관리, 컴포넌트 단위 모듈화로 재사용성 강화
- WebSocket 이슈 대응:
    - 포그라운드 ↔ 백그라운드 전환 시 **재연결 프로세스 설계**
    - 기획 단계 협의 후, **재연결 상태 UI 표시**로 사용자 경험 개선
    - WebSocket 관리 모듈 추상화 및 재연결 UI 컴포넌트 구현

### 성과

- 기존 30개 → **80여 개 전체 홈페이지로 채팅 기능 확장**
- 채널톡 유료 서비스 의존 제거 → **연간 비용 절감 효과**
- WebSocket 안정성 확보 및 UX 개선 → 사용자 만족도 향상
- 하나의 공통 컴포넌트로 관리 가능 → 유지보수 효율성 대폭 향상

### 사용 기술

Next.js, TypeScript, WebSocket, Context API, Zustand, React Query, 사내 npm 패키지

---

### 2. SNN 뉴스 사이트 (자사 뉴스 플랫폼)

**기간**: 2024.11 ~ 2025.03

**역할**: 풀스택 개발 (DB 설계 + API + 프론트엔드)

### 프로젝트 개요

자사 뉴스 플랫폼 및 관리자 사이트 개발. 기획 요구사항을 분석하고, DB 설계와 API 설계를 주도적으로 수행.

### 주요 기여

- DB 설계:
    - 카테고리별 테이블 분리 → 검색 시 비효율 발생
    - 서비스 전체 요구사항을 고려해 **테이블 통합 재설계** → 성능 최적화 및 검색 단순화
- API 개발:
    - Prisma 기반 CRUD API 및 마이그레이션 관리
    - 검색·필터링 성능을 고려한 쿼리 구조 설계
- 프론트엔드 연계:
    - 관리자 페이지 CRUD 기능 구현
    - 사용자 페이지 뉴스 열람 및 검색 기능 개발

### 성과

- **DB 구조 의사결정 경험 확보 (분리 vs 통합)**
- 기획 → DB 설계 → API → UI까지 **풀스택 개발 전 과정 수행**
- 관리자의 콘텐츠 등록/배포 프로세스 단축, 운영 효율성 개선

### 사용 기술

Next.js, TypeScript, Prisma, PostgreSQL, Zustand, React Query

---

### 3. 로맨스 어플 (출시 전, 신입 첫 주요 프로젝트)

**기간**:

- 1차: 2023.10 ~ 2024.01 (풀스택 개발 참여)
- 2차: 2024.05 ~ 2024.09 (프론트엔드 전담)

### 프로젝트 개요

자체 로맨스 서비스 어플리케이션 개발.

**신입 시절 첫 주요 프로젝트**로, 새로운 기술 학습 및 서비스 적용 경험을 축적.

### 주요 기여

- **1차 (풀스택, 학습 중심)**
    - 페이지 단위 UI/CRUD 기능 구현
    - **Firebase 푸시 알림**, **카카오 알림톡**, **토스 결제/환불 기능** 등 외부 서비스 연동
    - 새로운 기술 습득 및 적용에 집중
- **2차 (프론트엔드 전담, 협업 중심)**
    - 프론트·백엔드 분리 환경에서 API 연동 및 협업
    - 로그인/인증 기능 개발, Next.js SSR 활용 보안 강화
    - 페이지 단위 UI/UX 개발 및 상태 관리

### 성과 및 학습

- **신입 첫 프로젝트**로 빠른 학습·적응 능력 입증
- 외부 서비스 연동 경험 → 문서 기반 학습/적용 역량 확보
- 프론트·백엔드 협업 경험 → API 설계·소통 능력 강화
- SSR 기반 로그인 보안 강화 경험 → 이후 프로젝트 확장에 기여

### 사용 기술

Next.js, TypeScript, PostgreSQL, Firebase, 카카오 API, Toss Payments, Zustand, React Query

---

## 🛠️ 기술 스택

- **Frontend**: Next.js, TypeScript, React Query, Zustand, Context API
- **Backend**: Next.js 서버리스 API, Prisma
- **Database**: PostgreSQL
- **Etc**: Firebase, 카카오 API, Toss Payments, WebSocket, npm 패키지 관리


